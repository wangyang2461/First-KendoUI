{"version":3,"sources":["webpack:///webpack/bootstrap bc856fb5d39365809fe2?a522**","webpack:///external \"@angular/core\"?73d1","webpack:///./src/message.service.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtCA,2C;;;;;;;;;;;;;;;;;ACAA,kCAA2B,CAAe,CAAC;AAE3C;;IAEG;AAEH;KAAA;KAQA,CAAC;KATD;SAAC,iBAAU,EAAE;;uBAAA;KASb,qBAAC;AAAD,EAAC;AARqB,uBAAc,iBAQnC","file":"src/message.service.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bc856fb5d39365809fe2","module.exports = require(\"@angular/core\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 3\n// module chunks = 1 3","import { Injectable } from '@angular/core';\n\n/**\n * An abstract base class for a service that returns localized messages.\n */\n@Injectable()\nexport abstract class MessageService {\n  /**\n   * Returns a localized message for the supplied key.\n   *\n   * @param key The message key, e.g. \"kendo.grid.noRecords\".\n   * @return The localized message for this key or `undefined` if not found.\n   */\n  public abstract get(key: string): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/message.service.ts"],"sourceRoot":""}